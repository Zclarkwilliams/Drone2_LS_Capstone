So here's a transcript of some of the conversation I had with Casey from the previous team:

"Our only google doc that I am aware of is the final report and the weekly reports that are linked on the wiki section of the github. As far as 
projects go, we gave Rahul a copy of our last working project folder, and the project has all of the pins mapped already... if Rahul didn't give it 
to you, that is absurd. I have it on my computer at home, so you will need to wait until later tonight. I can send you the working folder with the 
lattice diamond project. I assumed that Rahul already gave that to you!

If you are trying to grasp the basics, the most important things to look at on the github are the motor signal characterization .zip, the radio 
receiver signals characterization .pdf, and the system design and modeling entry under the wiki tab.

My suggestions for continuing on:
- Have your coder look through the verilog code until they understand how we convert PWM inputs to the FPGA into digital values in our PWM_reader module
- Find an accelerometer with PWM outputs
- Instantiate another copy of the PWM_reader within the flight controller program that takes as input the pwm outputs of the accelerometer
- Use that parsed digital accelerometer data to do a bit of rudimentary stabilization in parallel with the manual flight controls
- Fly!

The biggest flaw in our design was the fact that it is fully manual and it is a huge pain in the ass to keep it in the air... it is REALLY squirrely. 

Also, you will notice (if you haven't already) that lattice doesn't allow multiplication or division in synthesisable verilog... that is why we had to 
use the rather ugly method of "if value <= this, then do this" for literally hundreds of lines... the lattice diamond software isn't particularly 
robust in that respect. It is better than vivado design suite, though!"

PRIOR TEAM WORKING FOLDER
"Alright, the first zip( drone project.zip) has the working folder and all of the lattice diamond project folder files. I think you can
just copy the entire lattice folder to your desktop, and then navigate to and double click /DESKTOP/LATTICE/PROJECT1A/BLINKY.LDF to open
the project exactly as my team left it. All of the ports should be auto-mapped, and everything should work. The reason that the project
is named blinky.ldf is because I set up the project originally to do the blinking led demo for rahul, and lattice diamond ended up being
such a huge pain in the ass to set up working projects in that i just kept re-using the same working project environment by deleting and
copying in new verilog code. You guys can do the same if you want."

PRIOR TEAM VERILOG BACKUPS
"The other attachment is a zip file full of one month worth of verilog code backups. If you want to go back to a simpler implementation
of our flight control software without all of the ugly if then statements, go back to one of the early folders (like 4/6) and replace
the verliog files in the working folder inside the project directory (/DESKTOP/LATTICE/PROJECT1A/BLINKY/SOURCE/) with the files from
that directory. Make sure to move the files currently in there somewhere else first, and don't do it with lattice diamond open."
